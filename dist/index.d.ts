import daysInMonth from "./daysInMonth";
import defer from "./defer";
import difference from "./difference";
import eventable from "./eventable";
import flatten from "./flatten";
import intersection from "./intersection";
import isPromise from "./isPromise";
import map from "./map";
import pipe from "./pipe";
import reduce from "./reduce";
import safeAdd from "./safeAdd";
import sleep from "./sleep";
import stringTemplate from "./stringTemplate";
import timestamp from "./timestamp";
import union from "./union";
import uniq from "./uniq";
declare const _default: {
    daysInMonth: typeof daysInMonth;
    defer: typeof defer;
    difference: typeof difference;
    event: () => eventable;
    eventable: typeof eventable;
    flatten: typeof flatten;
    intersection: typeof intersection;
    isObject: (val: unknown) => val is Record<any, any>;
    isPromise: typeof isPromise;
    map: typeof map;
    no: () => boolean;
    noop: () => void;
    object: {
        any: (obj: any) => boolean;
        clean: (objectToClean?: {}, { recursive }?: {
            recursive: boolean;
        }) => {};
        every: (obj: any, callback: any) => boolean;
        isEmpty: (obj: any) => boolean;
        nullToUndefined: (obj: any) => any;
        only: (raw: any, allowed: any) => {};
        present: (obj: any, keys: any) => any;
        reject: (raw: any, rejected: any) => {};
    };
    pipe: typeof pipe;
    reduce: typeof reduce;
    safeAdd: typeof safeAdd;
    sleep: typeof sleep;
    stringTemplate: typeof stringTemplate;
    timestamp: typeof timestamp;
    union: typeof union;
    uniq: typeof uniq;
    yes: () => boolean;
    ymd: (datetime?: Date) => string;
    ymdhms: (datetime?: Date) => string;
};
export = _default;
